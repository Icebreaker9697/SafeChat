package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.User;
import hello.UserRepository;

@Controller //This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController{
	
	@Autowired //This means to get the bean called userRepository
				// Which is auto-generated by Spring. We will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path="/enc")
	public @ResponseBody String enc(@RequestParam String payloadCipher, @RequestParam String encryptedKey) {
		String symmetricKey = decryptKey(encryptedKey);
		String[] msg = decryptMsg(payloadCipher, symmetricKey).split("\\?");
		String action = msg[0];
		String username = "";
		switch(action) {
			case "login":
				username = msg[1];
				String password = msg[2];
				return login(username, password, userRepository);
			case "add":
				username = msg[1];
				String passHash = msg[2];
				String userPublicKey = msg[3];
				String userPrivateKey = msg[4];
				return addNewUser(username, passHash, userPublicKey, userPrivateKey, userRepository);
				
			default: return "Server did not understand message.";
		}
	}
	
	public static String addNewUser(String username, String passHash, String userPublicKey, String encryptedUserPrivateKey, UserRepository userRepository){

		User u = userRepository.findByUsername(username);

		if(u != null) {
			return "User with that username already exists!";
		}

		User n = new User();
		n.setUsername(username);
		n.setPassHash(passHash);
		n.setUserPublicKey(userPublicKey);
		n.setEncryptedUserPrivateKey(encryptedUserPrivateKey);

		userRepository.save(n);
		return "Success";
	}
	
	public static String login(String username, String enteredPassword, UserRepository userRepository){
		User u = userRepository.findByUsername(username);
		if(u == null) {
			return "nologin";
		}
		
		String originalPassword = u.getPassHash();
		
		if(!Hasher.validatePassword(enteredPassword, originalPassword)) {
			return "wrong";
		}else {
			String resp = "";
			resp = resp + u.getUsername() + "?" + u.getEncryptedUserPrivateKey() + "?" + u.getUserPublicKey();
			return resp;
		}
	}
	
	private static String decryptKey(String encryptedKey) {
		String decryptedKey = RSACipher.decryptWithPrivate(ServerInfo.PRIVATEKEY, encryptedKey);
		return decryptedKey;
	}
	
	private static String decryptMsg(String payloadCipher, String symmetricKey) {
		return SymmetricCipher.decrypt(symmetricKey, payloadCipher, true);
	}

	/*
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		//This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/get")
	public @ResponseBody String getByEmail(String username) {
		//This returns a JSON or XML with the users
		User u = userRepository.findByUsername(username);
		return u.getPassHash();
	}
	*/
}